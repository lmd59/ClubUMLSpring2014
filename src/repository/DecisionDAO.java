package repository;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import domain.Decision;
import domain.Rationale;

public class DecisionDAO {


	public static boolean addDecision(Decision decision) {
		ResultSet rs;

		try {
			
			//create prepared statement
			Connection conn = DbManager.getConnection();
			PreparedStatement pstmt = conn
					.prepareStatement(
							"INSERT into decision(decisionName, projectId, decisionTime, userId, diagramId) VALUES(?,?,?,?,?);",
							Statement.RETURN_GENERATED_KEYS);
			pstmt.setString(1, decision.getDecisionName());			
			pstmt.setInt(2, decision.getProjectId());
			pstmt.setDate(3, decision.getDecisionTime());
			pstmt.setInt(4, decision.getUserId());
			pstmt.setInt(5, decision.getDiagramId());
			
			// Execute the SQL statement and update database accordingly.
			pstmt.executeUpdate();

			// Get userId generated by DB back, and set it in user object
			rs = pstmt.getGeneratedKeys();
			if (rs.next()) {
				int newId = rs.getInt(1);
				decision.setDecisionId(newId);
				
				for(Integer rationaleId:decision.getRationaleIds()){
					PreparedStatement psRationale = conn.prepareStatement("INSERT into decisionRationale(decisionId, rationaleId) VALUES(?,?);");
					psRationale.setInt(1, decision.getDecisionId());
					psRationale.setInt(2, rationaleId);
					
					psRationale.executeUpdate();
					psRationale.close();
				}
			}
			
			
			rs.close();
			pstmt.close();
			conn.close();
		} catch (SQLException e) {
			throw new IllegalArgumentException(e.getMessage(), e);
		}
		return true;
	}
	
	
	public static Decision getDecision(int decisionId) {
		try {
			Connection conn = DbManager.getConnection();
			PreparedStatement pstmt;
			pstmt = conn.prepareStatement("SELECT * FROM decision where decisionId = ?;");
			pstmt.setInt(1, decisionId);
			
			// Execute the SQL statement and store result into the ResultSet
			ResultSet rs = pstmt.executeQuery();

			if(rs.next()){
				Decision decision;
				decision = new Decision();
				decision.setDecisionId(rs.getInt("decisionId"));
				decision.setProjectId(rs.getInt("projectId"));
				decision.setDecisionTime(rs.getDate("decisionTime"));
				decision.setUserId(rs.getInt("userId"));
				decision.setUserName(UserDAO.getUser(rs.getInt("userId")).getUserName());
				decision.setDiagramName(DiagramDAO.getDiagram(rs.getInt("diagramId")).getDiagramName());
				decision.setDiagramId(rs.getInt("diagramId"));
				decision.setRationaleIds(DecisionDAO.getRationaleIds(rs.getInt("decisionId")));
				
				rs.close();
				pstmt.close();
				conn.close();
				return decision;
			}
			else return null;			
		} catch (SQLException e) {
			System.out.println(e.getMessage());
			System.out.println("Using default model.");
		}

		return null;
	}
	
	public static ArrayList<Integer> getRationaleIds(int decisionId) throws SQLException{
		ArrayList<Integer> rationaleIds = new ArrayList<Integer>();
		Connection conn = null;
    	PreparedStatement pstmt = null;
    	ResultSet rs = null;
    	try {
    		conn = DbManager.getConnection();
    	    pstmt = conn.prepareStatement(
    		    "SELECT * FROM decisionRationale where decisionId = ?;");
    	    pstmt.setInt(1, decisionId);
    	    rs = pstmt.executeQuery();
    	    while (rs.next()) {
    		
    	    	Integer rationaleId = rs.getInt("rationaleId");
    	    	rationaleIds.add(rationaleId);
    	    }
    	    return rationaleIds;
    	} catch (SQLException e) {
    		e.printStackTrace();
    	} finally {
    		if( rs != null) {rs.close();}
    		if( pstmt != null) {pstmt.close();}
    		if( conn != null) {conn.close();}
    	}
		return rationaleIds;
		
	}
	
	public static ArrayList<Decision> getDecisions(int projectId) throws SQLException{
		ArrayList<Decision> decisions = new ArrayList<Decision>();
		Connection conn = null;
    	PreparedStatement pstmt = null;
    	ResultSet rs = null;
    	try {
    		conn = DbManager.getConnection();
    	    pstmt = conn.prepareStatement(
    		    "SELECT * FROM decision where projectId = ?;");
    	    pstmt.setInt(1, projectId);
    	    rs = pstmt.executeQuery();
    	    while (rs.next()) {
    	    	Decision decision;
				decision = new Decision();
				decision.setDecisionId(rs.getInt("decisionId"));
				decision.setProjectId(rs.getInt("projectId"));
				decision.setDecisionTime(rs.getDate("decisionTime"));
				decision.setUserId(rs.getInt("userId"));
				decision.setUserName(UserDAO.getUser(rs.getInt("userId")).getUserName());
				decision.setDiagramName(DiagramDAO.getDiagram(rs.getInt("diagramId")).getDiagramName());
				decision.setDiagramId(rs.getInt("diagramId"));
				decision.setRationaleIds(DecisionDAO.getRationaleIds(rs.getInt("decisionId")));
	    		decisions.add(decision);
    	    }
    	    return decisions;
    	} catch (SQLException e) {
    		e.printStackTrace();
    	} finally {
    		if( rs != null) {rs.close();}
    		if( pstmt != null) {pstmt.close();}
    		if( conn != null) {conn.close();}
    	}
    	
		return decisions;
	}

//	/**
//	 * Get an user from DB by name
//	 * 
//     * @param username
//     * @return User object
//     */
//	public static User getUser(String username) {
//		try {
//			Connection conn = DbManager.getConnection();
//			PreparedStatement pstmt;
//
//			pstmt = conn.prepareStatement("SELECT * FROM user where userName = ?;");
//			pstmt.setString(1, username);
//			
//			// Execute the SQL statement and store result into the ResultSet
//			ResultSet rs = pstmt.executeQuery();
//
//			if (!rs.next()) {
//				return null;
//			}
//
//			// Modified by Xuesong Meng
//			User user;
//			user = new User(rs.getInt("userId"), username, "",
//					rs.getString("email"), rs.getString("securityQ"),
//					rs.getString("securityA"),rs.getString("userType"));
//
//			rs.close();
//			pstmt.close();
//			conn.close();
//			return user;
//		} catch (SQLException e) {
//			System.out.println("Using default model.");
//		}
//
//		return null;
//	}
//	
//	
//	/**
//	 * Modified By: AmeyaCJoshi
//	 * Purpose: To add a check that one email is used for one account only.
//	 * 
//	 * Get an user from DB by email
//	 * 
//     * @param email
//     * @return User object
//     */
//	public static User getUserEmail(String email) {
//		try {
//			Connection conn = DbManager.getConnection();
//			PreparedStatement pstmt;
//
//			pstmt = conn.prepareStatement("SELECT * FROM user where email = ?;");
//			pstmt.setString(1, email);
//			
//			// Execute the SQL statement and store result into the ResultSet
//			ResultSet rs = pstmt.executeQuery();
//
//			if (!rs.next()) {
//				return null;
//			}
//
//			User user;
//			user = new User(rs.getInt("userId"), rs.getString("username"),
//					"", email, rs.getString("securityQ"),
//					rs.getString("securityA"),rs.getString("userType"));
//
//			rs.close();
//			pstmt.close();
//			conn.close();
//			return user;
//		} catch (SQLException e) {
//			System.out.println("Using default model.");
//		}
//
//		return null;
//	}
//	
//	/**
//	 * Get user from DB by userId
//	 * 
//     * @param userId
//     * @return User object
//	 */
//	public static User getUser(int userId) {
//		try {
//			Connection conn = DbManager.getConnection();
//			PreparedStatement pstmt = conn
//					.prepareStatement("SELECT * FROM user where userId = ?;");
//			pstmt.setInt(1, userId);
//
//			// Execute the SQL statement and store result into the ResultSet
//			ResultSet rs = pstmt.executeQuery();
//
//			if (!rs.next()) {
//				return null;
//			}
//
//			User user;
//			user = new User(rs.getInt("userId"), rs.getString("userName"), "",
//					rs.getString("email"), "", "", rs.getString("userType"));
//			rs.close();
//			pstmt.close();
//			conn.close();
//			return user;
//		} catch (SQLException e) {
//			System.out.println("Using default model.");
//		}
//		return null;
//	}
//	
//	/**
//	 * Get userType from DB
//	 * 
//     * @param username User Name
//     * @return userType Type of User. "U"- User, "P"- Policy Manager. 
//	 */
//	public static String getUserType(String username) throws SQLException {
//		String userType = null;
//		Connection conn = null;
//		PreparedStatement pstmt = null;
//		ResultSet rs = null;
//		try {
//			conn = DbManager.getConnection();
//			pstmt = conn
//					.prepareStatement("SELECT userType FROM user where userName = ?;");
//			pstmt.setString(1, username);
//
//			// Execute the SQL statement and store result into the ResultSet
//			rs = pstmt.executeQuery();
//
//			if (!rs.next()) {
//				return null;
//			}
//
//			userType = rs.getString("userType");
//			rs.close();
//			pstmt.close();
//			conn.close();
//			return userType;
//		} catch (SQLException e) {
//			e.printStackTrace();
//		} finally {
//			if( rs != null) {rs.close();}
//			if(pstmt != null) {pstmt.close();}
//			if(conn != null) {conn.close();}
//		}
//		return userType;
//	}
//	
//	/**
//	 * Remove a user from DB
//	 * 
//     * @param User object
//     * @return true if success; false if fail
//	 */
//	public static boolean removeUser(User user) {
//		if (user == null) {
//			return false;
//		}
//		try {
//			Connection conn = DbManager.getConnection();
//			PreparedStatement pstmt = conn
//					.prepareStatement("DELETE FROM user where userId = ?;");
//			pstmt.setInt(1, user.getUserId());
//
//			// Execute the SQL statement and update database accordingly.
//			pstmt.executeUpdate();
//
//			pstmt.close();
//			conn.close();
//			return true;
//		} catch (SQLException e) {
//			throw new IllegalArgumentException(e.getMessage(), e);
//		}
//	}
//
//	/**
//	 * Update user in DB
//	 * 
//     * @param User object
//     * 			userName, password, email, securityQuestion, securityAnswer, userId
//     * @return true if success; false if fail
//	 */
//	public static boolean updateUser(User user) {
//		try {
//			Connection conn = DbManager.getConnection();
//			// Modified by Xuesong Meng
//			//PreparedStatement pstmt = conn
//			//		.prepareStatement("UPDATE user SET userName=? , password=?, email=?, securityQuestion =?, securityAnswer=? where user_Id = ?;");
//			PreparedStatement pstmt = conn
//					.prepareStatement("UPDATE user SET userName=? , password=?, email=?, securityQ =?, securityA=?, userType=? where userId = ?;");
//			pstmt.setString(1, user.getUserName());
//			pstmt.setString(2, user.getPassword());
//			pstmt.setString(3, user.getEmail());
//			pstmt.setString(4, user.getSecurityQuestion());
//			pstmt.setString(5, user.getSecurityAnswer());
//			pstmt.setString(6, user.getUserType());
//			pstmt.setInt(7, user.getUserId());
//			// Execute the SQL statement and update database accordingly.
//			pstmt.executeUpdate();
//
//			pstmt.close();
//			conn.close();
//			return true;
//		} catch (SQLException e) {
//			throw new IllegalArgumentException(e.getMessage(), e);
//		}
//	}
//
//public static ArrayList<Integer> getAllUser(String table) throws SQLException {
//		
//		ArrayList<Integer> userId = new ArrayList<Integer>();
//    	Connection conn = null;
//    	PreparedStatement pstmt = null;
//    	ResultSet rs = null;
//    	try {
//    		conn = DbManager.getConnection();
//    		String statement = "Select userId from " + table + ";";
//    	    pstmt = conn.prepareStatement(statement);
//    	    rs = pstmt.executeQuery();
//    	    while (rs.next()) {
//    		userId.add(rs.getInt(1));
//    	    }
//    	} catch (SQLException e) {
//    		e.printStackTrace();
//    	} finally {
//    		if( rs != null) {rs.close();}
//    		if( pstmt != null) {pstmt.close();}
//    		if( conn != null) {conn.close();}
//    	}
//    	return userId;
//		
//	}
//	
//	
//	public static ArrayList<User> getAllUser() throws SQLException {
//		
//		ArrayList<User> users = new ArrayList<User>();
//    	Connection conn = null;
//    	PreparedStatement pstmt = null;
//    	ResultSet rs = null;
//    	try {
//    		conn = DbManager.getConnection();
//    	    pstmt = conn.prepareStatement(
//    		    "SELECT * FROM user;");
//    	    rs = pstmt.executeQuery();
//    	    while (rs.next()) {
//    		User user = new User(rs.getInt("userId"), rs.getString("userName"),
//    				rs.getString("email"), rs.getString("password"),
//    				rs.getString("securityQ"),rs.getString("securityA"),rs.getString("userType"));
//    		users.add(user);
//    	    }
//    	    return users;
//    	} catch (SQLException e) {
//    		e.printStackTrace();
//    	} finally {
//    		if( rs != null) {rs.close();}
//    		if( pstmt != null) {pstmt.close();}
//    		if( conn != null) {conn.close();}
//    	}
//    	return users;
//		
//	}
}
