package repository;


import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;

import domain.Decision;
import domain.Diagram;
import domain.Rationale;
import domain.UseCaseDiagram;
import domain.User;

public class UseCaseDiagramDAO {


	public static boolean addUseCaseDiagram(UseCaseDiagram diagram) {
		ResultSet rs;

		try {
			//create prepared statement
			Connection conn = DbManager.getConnection();
		    String sql = "INSERT into useCaseDiagram(diagramName,createTime, filePath) VALUES(?,NOW(),?);";
		    PreparedStatement pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			pstmt.setString(1, diagram.getDiagramName());	
			pstmt.setString(2, diagram.getFilePath());
			System.out.println("file path: " + diagram.getFilePath());
			
			// Execute the SQL statement and update database accordingly.
			pstmt.executeUpdate();

			// Get userId generated by DB back, and set it in user object
			rs = pstmt.getGeneratedKeys();
			if (rs.next()) {
				int newId = rs.getInt(1);
				diagram.setUseCaseDiagramId(newId);
			}
			
			rs.close();
			pstmt.close();
			conn.close();
		} catch (SQLException e) {
			throw new IllegalArgumentException(e.getMessage(), e);
		}
		return true;
	}
	
	
	public static UseCaseDiagram getUseCaseDiagram(int useCaseDiagramId) {
		try {
			Connection conn = DbManager.getConnection();
			PreparedStatement pstmt;
			pstmt = conn.prepareStatement("SELECT * FROM useCaseDiagram where useCaseDiagramId = ?;");
			pstmt.setInt(1, useCaseDiagramId);
			
			// Execute the SQL statement and store result into the ResultSet
			ResultSet rs = pstmt.executeQuery();

			if(rs.next()){
				UseCaseDiagram diagram = new UseCaseDiagram();
				diagram.setUseCaseDiagramId(rs.getInt("useCaseDiagramId"));
				diagram.setDiagramName(rs.getString("diagramName"));
				diagram.setCreateTime(rs.getDate("createTime"));
				diagram.setFilePath(rs.getString("filePath"));
				
				rs.close();
				pstmt.close();
				conn.close();
				return diagram;
			}
			else return null;			
		} catch (SQLException e) {
			System.out.println(e.getMessage());
			System.out.println("Using default model.");
		}

		return null;
	}
	
	//returns all of the latest decisions for a given project- i.e. the latest decision for each decision name
	public static ArrayList<UseCaseDiagram> getAllUseCaseDiagrams() throws SQLException{
		ArrayList<UseCaseDiagram> diagrams = new ArrayList<UseCaseDiagram>();
		
		try {
		    Connection conn = DbManager.getConnection();
			String sql = "SELECT * FROM useCaseDiagram;";
		    PreparedStatement pstmt = conn.prepareStatement(sql);

		    ResultSet rs = pstmt.executeQuery();

		    //Initiate a list to get all returned rationale objects and set attributes		    
		    while (!rs.isClosed() && rs.next()) {
		    	UseCaseDiagram diagram = new UseCaseDiagram();
				diagram.setUseCaseDiagramId(rs.getInt("useCaseDiagramId"));
				diagram.setDiagramName(rs.getString("diagramName"));
				diagram.setCreateTime(rs.getDate("createTime"));
				diagram.setFilePath(rs.getString("filePath"));
				//decision.setRationaleIds(DecisionDAO.getRationaleIds(rs.getInt("decisionId")));
	    		diagrams.add(diagram);
    	    }
    	    
		    if( rs != null) {rs.close();}
    		if( pstmt != null) {pstmt.close();}
    		if( conn != null) {conn.close();}

    		return diagrams;
		} catch (SQLException ex) {
		    Logger.getLogger(RationaleDAO.class.getName()).log(Level.SEVERE, null, ex);
		}
    	
		return diagrams;
	}
	

	public static boolean deleteUseCaseDiagram(UseCaseDiagram diagram) {
		if (diagram == null) {
			return false;
		}
		try {
			Connection conn = DbManager.getConnection();
			PreparedStatement pstmt = conn
					.prepareStatement("DELETE FROM useCaseDiagram where useCaseDiagramId = ?;");
			pstmt.setInt(1, diagram.getUseCaseDiagramId());

			// Execute the SQL statement and update database accordingly.
			pstmt.executeUpdate();

			pstmt.close();
			conn.close();
			return true;
		} catch (SQLException e) {
			throw new IllegalArgumentException(e.getMessage(), e);
		}
	}

}
